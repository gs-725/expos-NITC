[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=-1;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1+[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+12];
backup;
multipush(EIP);
breakpoint;
if(EC!=0||[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] == PTLR * 512 - 1)then
	if(EC==1)then
		print "ILLEGAL INST";
	endif;
	if(EC==2)then
		print "ILLEGAL MEM";
	endif;	
	if(EC==3)then
		print "ARITHMETIC EXCEPTION";
	endif;
	R1=3;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_1;
	call SCHEDULER;
else
	if(EPN>3&&EPN<8)then //code page 
		multipush(EPN);
		R1=5;
		R2=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+EPN];
		call MOD_2;
		multipop(EPN);
		[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+EPN*2]=R0;
		[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+EPN	*2+1]="1100";
	else
		if(EPN==2||EPN==3)then //HEAP
			multipush(EPN);
			R1=1;
			call MOD_2;
			[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+4]=R0;
			[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+5]="1110";
			R1=1;
			call MOD_2;
			[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+6]=R0;
			[PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+7]="1110";
			multipop(EPN);
		endif;
	endif;
endif;
multipop(EIP);
restore;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
SP=SP+1;
[[PTBR+2*(SP/512)]*512+(SP%512)]=EIP;
ireturn;
				
