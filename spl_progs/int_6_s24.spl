[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;

alias userSP R1;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

alias fileDesc R2;
fileDesc = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

alias returnAddress R5;
returnAddress = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512;

if (fileDesc == -1) then
        // Terminal
        alias wordAddress R3;
        wordAddress = [PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512;

        multipush(R1, R2, R3, R5);
        R1 = 4; // Terminal Read
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = [wordAddress];
        call MOD_4;
        multipop(R1, R2, R3, R5);

        [returnAddress] = 0;
else if (fileDesc >= 0 && fileDesc <= 7 && [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET + fileDesc * 2] == FILE) then
        // File
        alias fileIndex R3;
        fileIndex = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET + fileDesc * 2 + 1];
        
        alias inodeIndex R4;
        inodeIndex = [OPEN_FILE_TABLE + fileIndex * 4 + 0];

        multipush(R1,R2,R3,R4,R5);
        R1 = 4; // Acquire Inode
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3,R4,R5);

        if (R0 != -1) then
                alias lseek R6;
                lseek = OPEN_FILE_TABLE + fileIndex * 4 + 2;

                alias wordAddress R7;
                wordAddress = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + (userSP - 3) % 512];
                wordAddress = [PTBR + 2 * wordAddress / 512] * 512 + wordAddress % 512;

                if (inodeIndex == INODE_ROOT) then
                        if ([lseek] == 480) then
                                [returnAddress] = -2;
                        else
                                [wordAddress] = [ROOT_FILE + [lseek]];
                                [lseek] = [lseek] + 1;
                                [returnAddress] = 0;
                        endif;
                else
                        if ([lseek] == [INODE_TABLE + inodeIndex * 16 + 2]) then
                                [returnAddress] = -2;
                        else
                                alias blockIndex R9;
                                blockIndex = [lseek] / 512;

                                alias blockNum R8;
                                blockNum = [INODE_TABLE + inodeIndex * 16 + 8 + blockIndex];
                                
                                alias offset R9;
                                offset = [lseek] % 512;
                                
                                multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
                                R1 = 2; // Buffer Read
                                R2 = blockNum;
                                R3 = offset;
                                R4 = wordAddress;
                                call MOD_3;
                                multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

                                [lseek] = [lseek] + 1;
                                [returnAddress] = 0;
                        endif;
                endif;

                multipush(R1,R2,R3,R4,R5,R6,R7);
                R1 = 5; // Release Inode
                R2 = inodeIndex;
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call MOD_0;
                multipop(R1,R2,R3,R4,R5,R6,R7);
        else
                [returnAddress] = -1;
        endif;
else
        [returnAddress] = -1;
endif;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = userSP;
ireturn;
