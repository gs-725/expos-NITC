alias functionNum R1;
alias currentPID R2;
if(functionNum==3)then
	breakpoint;
	//acquiring terminal
	multipush(R1,R2,R3);
	R1=8;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	multipop(R1,R2,R3);
	print R3;
	breakpoint;
	//releasing terminal
	multipush(R1,R2,R3);
	R1=9;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	multipop(R1,R2,R3);
	return;

else
	if(functionNum==4)then
	multipush(R1,R2,R3);
	R1=8;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	multipop(R1,R2,R3);
	breakpoint;
	read;
	[PROCESS_TABLE+currentPID*16+4]=WAIT_TERMINAL;
	multipush(R1,R2,R3);
	call SCHEDULER;
	multipop(R1,R2,R3);
	alias physicaladd R4;
	physicaladd=[PTBR+2*(R3/512)]*512+(R3%512);
	breakpoint;
	[physicaladd]=[PROCESS_TABLE+currentPID*16+8];
	return;
	else
		if(functionNum==2)then
			alias pgno R3;
			alias blocno R4;
			multipush(R1,R2,R3,R4);
			R1=3;
			R2=currentPID;
			call MOD_0;
			multipop(R1,R2,R3,R4);
			[DISK_STATUS_TABLE+1]=0;
			[DISK_STATUS_TABLE+2]=pgno;
			[DISK_STATUS_TABLE+3]=blocno;
			load(pgno,blocno);
			[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
			call SCHEDULER;
			return;
		endif;
		
	endif;
endif;	
	
	
	
	
	
